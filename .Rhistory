dplyr::filter(sum(is.na(theta_onset, theta_end)) != 2) ->
thetas_plot_dup
# remove rows that are all NA
thetas_plot_dup %>%
dplyr::filter(sum(is.na(theta_onset), is.na(theta_end)) != 2) ->
thetas_plot_dup
head(thetas_plot_dup)
thetas_plot_dup %>%
dplyr::filter(sum(is.na(theta_onset), is.na(theta_end)) != 2)
# remove rows that are all NA
thetas_plot_dup %>%
dplyr::filter(!(is.na(theta_onset) & is.na(theta_end))) ->
thetas_plot_dup
thetas_plot_dup
thetas_plot_dup %>%
dplyr::filter(!(is.na(theta_onset) & is.na(theta_end))) ->
thetas_plot_dup
thetas_noplot_dup %>%
dplyr::filter(!(is.na(theta_onset) & is.na(theta_end))) ->
thetas_noplot_dup
thetas_plot_dedup %>%
dplyr::filter(!(is.na(theta_onset) & is.na(theta_end))) ->
thetas_plot_dedup
thetas_noplot_dedup %>%
dplyr::filter(!(is.na(theta_onset) & is.na(theta_end))) ->
thetas_noplot_dedup
### panel (a)
# compare actual estimates by taking means
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(n_theta = n(),
mean_theta = mean(theta_onset, na.rm = T),
sd_theta   = sd(theta_onset, na.rm = T)) ->
thetas_plot_dup2
thetas_plot_dedup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(n_theta = n(),
mean_theta = mean(theta_onset, na.rm = T),
sd_theta   = sd(theta_onset, na.rm = T)) ->
thetas_plot_dedup2
res_comp_a <-
dplyr::full_join(thetas_plot_dup2, thetas_plot_dedup2, by = c("species", "year"))
# plot:
res_comp_a %>%
ggplot(aes(x = mean_theta.x, y = mean_theta.y)) +
geom_point(alpha = 0.33) +
geom_abline(slope = 1, intercept = 0) +
coord_cartesian(xlim = c(-100,300), ylim = c(-100,300)) +
theme_bw() +
xlab("onset, dup") +
ylab("onset, dedup") ->
xyplot_a
# plot difference
res_comp_a %>%
dplyr::mutate(theta_diff = mean_theta.y - mean_theta.x) ->
res_comp_a
# re-plot
res_comp_a %>%
ggplot(aes(x = theta_diff)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30), breaks = seq(-30,30,10)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = mean(res_comp_a$theta_diff, na.rm = T), col = "darkorange2", lty = 2) +
xlab("dedup - dup") ->
diff_plot_a
plot_a <- ggpubr::ggarrange(plotlist = list(xyplot_a, diff_plot_a), ncol = 2, align = "hv")
### panel (b)
res_comp_b <-
dplyr::full_join(thetas_noplot_dup, thetas_noplot_dedup, by = c("species", "year"))
res_comp_b %>%
ggplot(aes(x = theta_onset.x, y = theta_onset.y)) +
geom_point(alpha = 0.33) +
geom_abline(slope = 1, intercept = 0) +
coord_cartesian(xlim = c(-100,300), ylim = c(-100,300)) +
theme_bw() +
xlab("onset, dup") +
ylab("onset, dedup") ->
xyplot_b
# plot difference
res_comp_b %>%
dplyr::mutate(theta_diff = theta_onset.y - theta_onset.x) ->
res_comp_b
# re-plot
res_comp_b %>%
ggplot(aes(x = theta_diff)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30), breaks = seq(-30,30,10)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = mean(res_comp_b$theta_diff, na.rm = T), col = "darkorange2", lty = 2) +
xlab("dedup - dup") ->
diff_plot_b
plot_b <- ggpubr::ggarrange(plotlist = list(xyplot_b, diff_plot_b), ncol = 2, align = "hv")
ggpubr::ggarrange(plotlist = list(plot_a, plot_b),
nrow = 2, ncol = 1, align = "hv", labels = c("a", "b"))
### panel a:
# bring in min
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_a %>%
dplyr::left_join(the_mins, by = c("species", "year")) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.y
diff_plot_a <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x,
diff_from_min_plot.y),
ncol = 2, align = "hv", labels = c("a", "b"))
### panel b
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_b %>%
dplyr::left_join(the_mins, by = c("species", "year")) %>%
dplyr::mutate(diff_from_min.x = theta_onset.x - min_obsv,
diff_from_min.y = theta_onset.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.y
diff_plot_b <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x,
diff_from_min_plot.y),
ncol = 2, align = "hv", labels = c("c", "d"))
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b),
nrow = 2, ncol = 1, align = "hv")
?min
### panel a:
# bring in min
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min, na.rm = TRUE)) ->
the_mins
res_comp_a %>%
dplyr::left_join(the_mins, by = c("species", "year")) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.x
diff_plot_a <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x,
diff_from_min_plot.y),
ncol = 2, align = "hv", labels = c("a", "b"))
### panel b
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min, na.rm = TRUE)) ->
the_mins
res_comp_b %>%
dplyr::left_join(the_mins, by = c("species", "year")) %>%
dplyr::mutate(diff_from_min.x = theta_onset.x - min_obsv,
diff_from_min.y = theta_onset.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.y
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b),
nrow = 2, ncol = 1, align = "hv")
### panel a:
# bring in min
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min, na.rm = TRUE)) ->
the_mins
res_comp_a %>%
dplyr::left_join(the_mins, by = c("species", "year")) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.y
diff_plot_a <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x,
diff_from_min_plot.y),
ncol = 2, align = "hv", labels = c("a", "b"))
### panel b
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min, na.rm = TRUE)) ->
the_mins
res_comp_b %>%
dplyr::left_join(the_mins, by = c("species", "year")) %>%
dplyr::mutate(diff_from_min.x = theta_onset.x - min_obsv,
diff_from_min.y = theta_onset.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") +
theme(plot.title = element_text(size = 8, face = "bold")) ->
diff_from_min_plot.y
diff_plot_b <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x,
diff_from_min_plot.y),
ncol = 2, align = "hv", labels = c("c", "d"))
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b),
nrow = 2, ncol = 1, align = "hv")
## re-scaling year
# first, done the wrong way:
thetas_plot_dup_A   <- rescale_year(thetas_plot_dup,   uniques = FALSE, fill_missing = FALSE)
thetas_noplot_dup_A <- rescale_year(thetas_noplot_dup, uniques = FALSE, fill_missing = FALSE)
thetas_plot_dedup_A   <- rescale_year(thetas_plot_dedup,   uniques = FALSE, fill_missing = FALSE)
thetas_noplot_dedup_A <- rescale_year(thetas_noplot_dedup, uniques = FALSE, fill_missing = FALSE)
# second, done the correct way:
thetas_plot_dup_B   <- rescale_year(thetas_plot_dup,   uniques = TRUE, fill_missing = TRUE)
thetas_noplot_dup_B <- rescale_year(thetas_noplot_dup, uniques = TRUE, fill_missing = TRUE)
thetas_plot_dedup_B   <- rescale_year(thetas_plot_dedup,   uniques = TRUE, fill_missing = TRUE)
thetas_noplot_dedup_B <- rescale_year(thetas_noplot_dedup, uniques = TRUE, fill_missing = TRUE)
pz1 <- plot_rescaled_year(thetas_plot_dup_A, "dup, by plot")
pz2 <- plot_rescaled_year(thetas_noplot_dup_A, "dup, by year")
pz3 <- plot_rescaled_year(thetas_plot_dedup_A, "dedup, by plot")
pz4 <- plot_rescaled_year(thetas_noplot_dedup_A, "dedup, by year")
ggpubr::ggarrange(plotlist = list(pz1, pz2, pz3, pz4),
ncol = 2, nrow = 2,
labels = c("a", "b", "c", "d"))
thetas_pearse <- thetas_plot_dup_A
thetas_iler   <- thetas_noplot_dedup_B
# Remove 8 species with fewer than 19 years of data from species list in CaraDonna et al. (2014)
spp_to_remove <- c("Maianthemum stellatum",
"Gentiana parryi",
"Lomatium dissectum",
"Dodecatheon pulchellum",
"Hydrophyllum fendleri",
"Descurainia richardsonii",
"Pedicularis bracteosa",
"Sedum rosea")
thetas_pearse <- filter_species_list(thetas_pearse, spp_to_remove)
thetas_iler   <- filter_species_list(thetas_iler, spp_to_remove)
# add em50 dataframe (em50 = day on which 50% of flowers were counted)
em50.wide <- read.csv("../data/EM50_RMBL.csv", header = T)
em50.long <- melt(em50.wide, id.vars = "year")
names(em50.long)[2] <- "species"
names(em50.long)[3] <- "em50"
em50.long$species <- as.character(em50.long$species)
em50.long$year    <- as.numeric(em50.long$year)
em50.long$species <- gsub("\\.", " ", em50.long$species)
thetas_iler %>%
dplyr::left_join(em50.long, by = c("species", "year")) ->
thetas_iler
thetas_pearse %>%
dplyr::left_join(em50.long, by = c("species", "year")) ->
thetas_pearse
# run linear regressions using onset, peak, and end estimates
lms_iler   <- run_lms(thetas_iler)
lms_pearse <- run_lms(thetas_pearse)
# run Deming regression and capture coefficient output
deming_iler   <- run_deming(lms_iler)
deming_pearse <- run_deming(lms_pearse)
head(thetas_iler)
run_lms <- function(x) {
onset.model.all <- lm(theta_onset ~ species * year_z + log(abundance), data = x)
#peak.model.all  <- lm(em50        ~ species * year_z + log(abundance), data = x)
peak.model.all  <- lm(mean        ~ species * year_z + log(abundance), data = x)
end.model.all   <- lm(theta_end   ~ species * year_z + log(abundance), data = x)
# extract the coefficients
onset_coefs <-
onset.model.all %>%
coef_extract(time_term  = 'year_z',
model_name = 'onset',
gsub_str   = 'species')
peak_coefs <-
peak.model.all %>%
coef_extract(time_term  = 'year_z',
model_name = 'mean',
gsub_str   = 'species')
end_coefs <-
end.model.all %>%
coef_extract(time_term  = 'year_z',
model_name = 'end',
gsub_str   = 'species')
all_coefs <-
dplyr::full_join(
dplyr::select(onset_coefs, -model),
dplyr::select(peak_coefs, -model),
by = 'species') %>%
dplyr::full_join(
dplyr::select(end_coefs, -model),
by = 'species')
return(all_coefs)
}
# run linear regressions using onset, peak, and end estimates
lms_iler   <- run_lms(thetas_iler)
lms_pearse <- run_lms(thetas_pearse)
# run Deming regression and capture coefficient output
deming_iler   <- run_deming(lms_iler)
lms_iler   <- run_lms(thetas_iler)
lms_iler
run_deming <- function(x) {
d.fvp <- deming(estimate_mean ~ estimate_onset,
xstd = std.error_onset,
ystd = std.error_mean,
data = x)
# first vs. end
d.fve <- deming(estimate_end ~ estimate_onset,
xstd = std.error_onset,
ystd = std.error_end,
data = x)
# peak vs. end
d.pve <- deming(estimate_end ~ estimate_mean,
xstd = std.error_mean,
ystd = std.error_end,
data = x)
# compile and export confidence limits on slope and intercept estimates
list(d.fvp,
d.fve,
d.pve) -> dl1
names(dl1) <- c('first_v_peak',
'first_v_end',
'peak_v_end')
dl1.coefs <- lapply(dl1, function(x) data.frame(x$coefficients,x$ci))
for (i in seq_along(dl1.coefs)) {
dl1.coefs[[i]]$model <- names(dl1)[i]
}
dl1.coefs <-
dl1.coefs %>%
do.call(rbind, .)
names(dl1.coefs)[1] <- c('estimate')
dl1.coefs$term <- 'slope'
dl1.coefs$term[grep('Intercept', row.names(dl1.coefs))] <- 'intercept'
return(dl1.coefs)
}
deming_iler   <- run_deming(lms_iler)
deming_pearse <- run_deming(lms_pearse)
# write output
write.table(deming_iler,
file = "../output/deming_reg_coefs_Iler.csv",
quote = F,
sep = ",",
row.names = F,
col.names = T)
write.table(deming_pearse,
file = "../output/deming_reg_coefs_Pearse.csv",
quote = F,
sep = ",",
row.names = F,
col.names = T)
deming_iler %>%
dplyr::arrange(term, model) %>%
dplyr::bind_rows(
dplyr::arrange(deming_pearse, term, model)
) %>%
dplyr::filter(term == "slope") %>%
dplyr::mutate(estimate = round(estimate,3),
lower.0.95 = round(lower.0.95,3),
upper.0.95 = round(upper.0.95,3)) %>%
kable() %>%
kable_styling(bootstrap_options = c("condensed", "striped"), full_width = FALSE) %>%
pack_rows("Iler models", 1, 3) %>%
pack_rows("Pearse models", 4, 6)
# produce plots representing deming regression against one another
iler_deming_plot <- plot_coefs(lms_iler, deming_iler, "Iler")
plot_coefs <- function(x, y, plot_title) {
x %>%
ggplot(aes(x = estimate_onset,
y = estimate_mean,
xmin = estimate_onset - std.error_onset,
xmax = estimate_onset + std.error_onset,
ymin = estimate_mean - std.error_mean,
ymax = estimate_mean + std.error_mean)) +
geom_errorbar(alpha = 0.5, lwd = 0.25, col = 'dodgerblue') +
geom_errorbarh(alpha = 0.5, lwd = 0.25, col = 'dodgerblue') +
geom_point(col = 'dodgerblue') +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title = element_text(size = 8, face = 'bold')) +
geom_abline(intercept = 0, slope = 1, lty = 2, alpha = 0.5, col = 'gray40') +
geom_abline(intercept = y$estimate[y$term == 'intercept' & y$model == 'first_v_peak'],
slope = y$estimate[y$term == 'slope' & y$model == 'first_v_peak'],
lty = 1,
alpha = 0.5,
col = 'dodgerblue',
lwd = 1) +
coord_cartesian(xlim = c(-30,15), ylim = c(-30,15)) +
ggtitle(paste0(plot_title)) ->
first_v_peak_plot
x %>%
ggplot(aes(x = estimate_onset,
y = estimate_end,
xmin = estimate_onset - std.error_onset,
xmax = estimate_onset + std.error_onset,
ymin = estimate_end - std.error_end,
ymax = estimate_end + std.error_end)) +
geom_errorbar(alpha = 0.5, lwd = 0.25, col = 'red') +
geom_errorbarh(alpha = 0.5, lwd = 0.25, col = 'red') +
geom_point(col = 'red') +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title = element_text(size = 8, face = 'bold')) +
geom_abline(intercept = 0, slope = 1, lty = 2, alpha = 0.5, col = 'gray40') +
geom_abline(intercept = y$estimate[y$term == 'intercept' & y$model == 'first_v_end'],
slope = y$estimate[y$term == 'slope' & y$model == 'first_v_end'],
lty = 1,
alpha = 0.5,
col = 'red',
lwd = 1) +
coord_cartesian(xlim = c(-30,15), ylim = c(-30,15)) +
ggtitle(paste0(plot_title)) ->
first_v_end_plot
ggpubr::ggarrange(plotlist = list(first_v_peak_plot, first_v_end_plot),
nrow = 2,
ncol = 1) -> deming_plot
return(deming_plot)
}
# produce plots representing deming regression against one another
iler_deming_plot <- plot_coefs(lms_iler, deming_iler, "Iler")
# save xy plot of onset versus peak and last flowering with stderr based on Weibull estimates
ggsave(iler_deming_plot,
filename = file.path("../output/iler_deming_plot.png"),
device = "png",
width = 5,
height = 8,
units = "in",
dpi = 300)
ggpubr::ggarrange(plotlist = list(iler_deming_plot, pearse_deming_plot),
labels = c("a", "b"),
ncol = 2,
align = "hv")
pearse_deming_plot <- plot_coefs(lms_pearse, deming_pearse, "Pearse")
pearse_deming_plot
ggpubr::ggarrange(plotlist = list(iler_deming_plot, pearse_deming_plot),
labels = c("a", "b"),
ncol = 2,
align = "hv")
