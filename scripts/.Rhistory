# testing out weibull function on fake data to illustrate how it works:
doys <- list(
doy1 = c(180:210),
doy2 = rep(doy1, each = 2)[1:30],
doy3 = rep(doy1, each = 3)[1:30],
doy4 = rep(doy1, each = 4)[1:30],
doy5 = rep(doy1, each = 5)[1:30],
doy6 = rep(doy1, each = 6)[1:30],
doy7 = rep(doy1, each = 7)[1:30],
doy8 = rep(doy1, each = 8)[1:30],
doy9 = rep(doy1, each = 9)[1:30],
doy10 = rep(doy1, each = 10)[1:30]
)
thetas <- lapply(doys,
weib.limit, k=30, FALSE)
theta_test <- data.frame(nrep = c(1:10),
theta_est = do.call(rbind, thetas))
theta_test %>%
ggplot(aes(x = nrep,
y = theta_est)) +
geom_point(alpha = 0.6) +
geom_line(alpha = 0.6) +
theme_bw()
update.packages(ask = FALSE, checkBuilt = TRUE)
?update.packages
install.packages("rmarkdown")
install.packages("rmarkdown")
head(thetas_plot_dedup)
# compare actual estimates by taking means
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(n_theta = n(),
mean_theta = mean(theta_onset, na.rm = T),
sd_theta   = sd(theta_onset, na.rm = T)) ->
thetas_plot_dup2
# -------------- #
# load libraries #
# -------------- #
#library(devtools)
#install_github("willpearse/phest")
library(phest)
library(reshape2)
library(deming)
library(car)
library(devtools)
library(broom)
library(plyr)
library(lme4)
library(phest)
library(lmerTest)
library(dplyr)
library(stringr)
library(ggplot2)
library(knitr)
library(kableExtra)
#source(file.path('./2018-07-09_headers.R'))
source(file.path('./weibull.R')) # Pearse et al. github.com code for repo 'phest'
source(file.path('./iler_functions.R')) # Iler et al. custom functions
# compare actual estimates by taking means
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(n_theta = n(),
mean_theta = mean(theta_onset, na.rm = T),
sd_theta   = sd(theta_onset, na.rm = T)) ->
thetas_plot_dup2
thetas_plot_dedup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(n_theta = n(),
mean_theta = mean(theta_onset, na.rm = T),
sd_theta   = sd(theta_onset, na.rm = T)) ->
thetas_plot_dedup2
res_comp <-
dplyr::full_join(thetas_plot_dup2, thetas_plot_dedup2, by = c('species','year'))
# plot:
res_comp %>%
ggplot(aes(x = mean_theta.x, y = mean_theta.y)) +
geom_point(alpha = 0.33) +
geom_abline(slope = 1, intercept = 0) +
coord_cartesian(xlim = c(-100,300), ylim = c(-100,300)) +
theme_bw() +
xlab('onset, dup') +
ylab('onset, dedup') ->
xyplot1
# plot difference
res_comp %>%
dplyr::mutate(theta_diff = mean_theta.y - mean_theta.x) ->
res_comp
# re-plot
res_comp %>%
ggplot(aes(x = theta_diff)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30), breaks = seq(-30,30,10)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = mean(res_comp$theta_diff, na.rm = T), col = 'darkorange2', lty = 2) +
xlab('dedup - dup') ->
diff_plot
### panel (b)
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(n_theta = n(),
mean_theta = mean(theta_onset, na.rm = T),
sd_theta   = sd(theta_onset, na.rm = T)) ->
thetas_noplot_dup2
head(thetas_noplot_dup)
### panel (b)
res_comp_b <-
dplyr::full_join(thetas_noplot_dup, thetas_noplot_dedup, by = c('species','year'))
head(res_comp_b)
head(thetas_noplot_dup)
ggpubr::ggarrange(plotlist = list(xyplot1, diff_plot), ncol = 2, align = 'hv')
res_comp_a <-
dplyr::full_join(thetas_plot_dup2, thetas_plot_dedup2, by = c('species','year'))
# plot:
res_comp_a %>%
ggplot(aes(x = mean_theta.x, y = mean_theta.y)) +
geom_point(alpha = 0.33) +
geom_abline(slope = 1, intercept = 0) +
coord_cartesian(xlim = c(-100,300), ylim = c(-100,300)) +
theme_bw() +
xlab('onset, dup') +
ylab('onset, dedup') ->
xyplot1
# plot difference
res_comp_a %>%
dplyr::mutate(theta_diff = mean_theta.y - mean_theta.x) ->
res_comp_a
# re-plot
res_comp_a %>%
ggplot(aes(x = theta_diff)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30), breaks = seq(-30,30,10)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = mean(res_comp$theta_diff, na.rm = T), col = 'darkorange2', lty = 2) +
xlab('dedup - dup') ->
diff_plot
plot_a <- ggpubr::ggarrange(plotlist = list(xyplot1, diff_plot), ncol = 2, align = 'hv')
# plot difference
res_comp_b %>%
dplyr::mutate(theta_diff = mean_theta.y - mean_theta.x) ->
res_comp_b
# plot difference
res_comp_b %>%
dplyr::mutate(theta_diff = theta.y - theta.x) ->
res_comp_b
head(res_comp_b)
### panel (b)
res_comp_b <-
dplyr::full_join(thetas_noplot_dup, thetas_noplot_dedup, by = c('species','year'))
res_comp_b %>%
ggplot(aes(x = mean_theta.x, y = mean_theta.y)) +
geom_point(alpha = 0.33) +
geom_abline(slope = 1, intercept = 0) +
coord_cartesian(xlim = c(-100,300), ylim = c(-100,300)) +
theme_bw() +
xlab('onset, dup') +
ylab('onset, dedup') ->
xyplot_b
# plot difference
res_comp_b %>%
dplyr::mutate(theta_diff = theta_onset.y - theta_onset.x) ->
res_comp_b
# re-plot
res_comp_b %>%
ggplot(aes(x = theta_diff)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30), breaks = seq(-30,30,10)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = mean(res_comp$theta_diff, na.rm = T), col = 'darkorange2', lty = 2) +
xlab('dedup - dup') ->
diff_plot_b
ggpubr::ggarrange(plotlist = list(xyplot_b, diff_plot_b), ncol = 2, align = 'hv')
res_comp_b %>%
ggplot(aes(x = theta_onset.x, y = theta_onset.y)) +
geom_point(alpha = 0.33) +
geom_abline(slope = 1, intercept = 0) +
coord_cartesian(xlim = c(-100,300), ylim = c(-100,300)) +
theme_bw() +
xlab('onset, dup') +
ylab('onset, dedup') ->
xyplot_b
# plot difference
res_comp_b %>%
dplyr::mutate(theta_diff = theta_onset.y - theta_onset.x) ->
res_comp_b
# re-plot
res_comp_b %>%
ggplot(aes(x = theta_diff)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30), breaks = seq(-30,30,10)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = mean(res_comp_b$theta_diff, na.rm = T), col = 'darkorange2', lty = 2) +
xlab('dedup - dup') ->
diff_plot_b
plot_b <- ggpubr::ggarrange(plotlist = list(xyplot_b, diff_plot_b), ncol = 2, align = 'hv')
plot_b
ggpubr::ggarrange(plotlist = list(plot_a, plot_b), nrow = 1, ncol = 2, align = 'hv', labels = c('a','b'))
ggpubr::ggarrange(plotlist = list(plot_a, plot_b), nrow = 2, ncol = 1, align = 'hv', labels = c('a','b'))
# bring in min
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_a %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.y
### panel b
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_b %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
res_comp_b %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = theta_onset.x - min_obsv,
diff_from_min.y = theta_onset.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.x
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.y
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b), nrow = 2, ncol = 1, align = 'hv', labels = c('a','b'))
diff_plot_b <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x, diff_from_min_plot.y), ncol = 2, align = 'hv', labels = c('a','b'))
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b), nrow = 2, ncol = 1, align = 'hv', labels = c('a','b'))
### panel a:
# bring in min
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_a %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.y
diff_plot_a <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x, diff_from_min_plot.y), ncol = 2, align = 'hv', labels = c('a','b'))
### panel b
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_b %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = theta_onset.x - min_obsv,
diff_from_min.y = theta_onset.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) ->
diff_from_min_plot.y
diff_plot_b <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x, diff_from_min_plot.y), ncol = 2, align = 'hv', labels = c('a','b'))
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b), nrow = 2, ncol = 1, align = 'hv', labels = c('a','b'))
### panel a:
# bring in min
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_a %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") ->
diff_from_min_plot.y
diff_plot_a <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x, diff_from_min_plot.y), ncol = 2, align = 'hv', labels = c('a','b'))
### panel b
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_b %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = theta_onset.x - min_obsv,
diff_from_min.y = theta_onset.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup")->
diff_from_min_plot.y
diff_plot_b <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x, diff_from_min_plot.y), ncol = 2, align = 'hv')
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b), nrow = 2, ncol = 1, align = 'hv', labels = c('a','b'))
### panel a:
# bring in min
thetas_plot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_a %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = mean_theta.x - min_obsv,
diff_from_min.y = mean_theta.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = 'bold')) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") +
theme(plot.title = element_text(size = 8, face = 'bold')) ->
diff_from_min_plot.y
diff_plot_a <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x, diff_from_min_plot.y), ncol = 2, align = 'hv', labels = c('a','b'))
### panel b
thetas_noplot_dup %>%
dplyr::group_by(species, year) %>%
dplyr::summarise(min_obsv = min(min)) ->
the_mins
res_comp_b %>%
dplyr::left_join(the_mins, by = c('species','year')) %>%
dplyr::mutate(diff_from_min.x = theta_onset.x - min_obsv,
diff_from_min.y = theta_onset.y - min_obsv) ->
res_comp2
# now plot:
res_comp2 %>%
ggplot(aes(x = diff_from_min.x)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dup") +
theme(plot.title = element_text(size = 8, face = 'bold')) ->
diff_from_min_plot.x
res_comp2 %>%
ggplot(aes(x = diff_from_min.y)) +
geom_histogram(bins = 100, alpha = 0.66) +
theme_bw() +
scale_x_continuous(limits = c(-30, 30)) +
geom_vline(xintercept = 0) +
ggtitle("dedup") +
theme(plot.title = element_text(size = 8, face = 'bold')) ->
diff_from_min_plot.y
diff_plot_b <- ggpubr::ggarrange(plotlist = list(diff_from_min_plot.x, diff_from_min_plot.y), ncol = 2, align = 'hv')
ggpubr::ggarrange(plotlist = list(diff_plot_a, diff_plot_b), nrow = 2, ncol = 1, align = 'hv', labels = c('a','b'))
source(file.path('./iler_functions.R')) # Iler et al. custom functions
# produce plots representing deming regression against one another
iler_deming_plot <- plot_coefs(lms_iler, deming_iler)
# produce plots representing deming regression against one another
iler_deming_plot <- plot_coefs(lms_iler, deming_iler, 'Iler')
pearse_deming_plot <- plot_coefs(lms_pearse, deming_pearse, 'Pearse')
# save xy plot of onset versus peak and last flowering with stderr based on Weibull estimates
ggsave(iler_deming_plot,
filename = file.path('../output/iler_deming_plot.png'),
device = 'png',
width = 5,
height = 8,
units = 'in',
dpi = 300)
iler_deming_plot
ggsave(pearse_deming_plot,
filename = file.path('../output/pearse_deming_plot.png'),
device = 'png',
width = 5,
height = 8,
units = 'in',
dpi = 300)
```{r fig.height=5.5, fig.width=6, fig.align='center'}
iler_deming_plot
pearse_deming_plot
ggpubr::ggarrange(plotlist = list(iler_deming_plot, pearse_deming_plot),
labels = c('a','b'),
ncol = 2,
align = 'hv')
ggpubr::ggarrange(plotlist = list(iler_deming_plot, pearse_deming_plot),
labels = c('a','b'),
ncol = 2,
align = 'hv')
source(file.path('./iler_functions.R')) # Iler et al. custom functions
# produce plots representing deming regression against one another
iler_deming_plot <- plot_coefs(lms_iler, deming_iler, 'Iler')
pearse_deming_plot <- plot_coefs(lms_pearse, deming_pearse, 'Pearse')
# save xy plot of onset versus peak and last flowering with stderr based on Weibull estimates
ggsave(iler_deming_plot,
filename = file.path('../output/iler_deming_plot.png'),
device = 'png',
width = 5,
height = 8,
units = 'in',
dpi = 300)
ggsave(pearse_deming_plot,
filename = file.path('../output/pearse_deming_plot.png'),
device = 'png',
width = 5,
height = 8,
units = 'in',
dpi = 300)
ggpubr::ggarrange(plotlist = list(iler_deming_plot, pearse_deming_plot),
labels = c('a','b'),
ncol = 2,
align = 'hv')
# -------------- #
# load libraries #
# -------------- #
#library(devtools)
#install_github("willpearse/phest")
library(phest)
library(reshape2)
library(deming)
library(car)
library(devtools)
library(broom)
library(plyr)
library(lme4)
library(phest)
library(lmerTest)
library(dplyr)
library(stringr)
library(ggplot2)
library(knitr)
library(kableExtra)
source(file.path('./weibull.R')) # Pearse et al. github.com code for repo 'phest'
source(file.path('./iler_functions.R')) # Iler et al. custom functions
